import { useState } from 'react';
import { Route, Router, Text, ButtonGroup, Button, useText, Image, Dialog, DialogStep } from '@urban-bot/core';
import fs from 'fs';
import logo from './assets/logo.png';

const file = fs.readFileSync(logo);

function Echo() {
    const [text, setText] = useState(' –ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å?');

    useText(({ text }) => {
        setText(text);
    });

    return (
        <Text>
            <i>{text}</i>
        </Text>
    );
}

function Logo() {
    const [title, setTitle] = useState('Urban Bot');

    const addRobot = () => {
        setTitle(title + 'ü§ñ');
    };

    return (
        <Image
            title={title}
            file={file}
            buttons={
                <ButtonGroup>
                    <Button onClick={addRobot}>Add robot</Button>
                </ButtonGroup>
            }
        />
    );
}

const questions = [
    {
        question: '–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–æ–¥–∏–Ω–æ–π –≤–æ–ª–µ–π–±–æ–ª–∞?',
        answers: [
            { answer: '–ê–º–µ—Ä–∏–∫–∞', correct: true },
            { answer: '–ë—Ä–∞–∑–∏–ª–∏—è', correct: false },
            { answer: '–§—Ä–∞–Ω—Ü–∏—è', correct: false },
        ],
    },

    {
        question: '–ö–∞–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏–º–µ—Ç—å –∏–≥—Ä–æ–∫—É –≤ –≤–æ–ª–µ–π–±–æ–ª–µ?',
        answers: [
            { answer: 24, correct: true },
            { answer: 36, correct: false },
            { answer: 98, correct: false },
        ],
    },
    {
        question: '–í –∫–∞–∫–æ–º –≥–æ–¥—É –≤–æ–ª–µ–π–±–æ–ª –ø–æ—è–≤–∏–ª—Å—è –≤ –†–æ—Å—Å–∏–∏?',
        answers: [
            { answer: 1875, correct: false },
            { answer: 1920, correct: true },
            { answer: 1980, correct: false },
        ],
    },

    {
        question: '–ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ?',
        answers: [
            { answer: 6, correct: true },
            { answer: 8, correct: false },
            { answer: 9, correct: false },
        ],
    },

    {
        question: '–ù–∞–∑–æ–≤–∏—Ç–µ –≤–µ—Å –≤–æ–ª–µ–π–±–æ–ª—å–Ω–æ–≥–æ –º—è—á–∞?',
        answers: [
            { answer: 300, correct: false },
            { answer: 285, correct: true },
            { answer: 265, correct: false },
        ],
    },
];

export const BotQuestion = ({ correctCount, setCorrectCount }) => {
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const currentQuestion = questions[currentQuestionIndex];

    // –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    const nextQuestion = () => {
        if (currentQuestionIndex < questions.length - 1) {
            setCurrentQuestionIndex(currentQuestionIndex + 1);
        } else {
            // –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–¥–µ—Å—å
            console.log('–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!');
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    // const handleAnswer = (selectedAnswer) => {
    //     // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    //     console.log('–í—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç:', selectedAnswer);

    //     // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    //     nextQuestion();
    // };

    const handleAnswer = (selectedAnswer) => {
        if (correctCount) {
            setCorrectCount + 1;
        }
        console.log('–í—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç:', selectedAnswer);
        nextQuestion();
    };

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ questions
    const renderDialogStep = (questionIndex) => {
        const question = questions[questionIndex];
        if (!question) {
            // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            return (
                <DialogStep
                    content={
                        <>
                            <Text>–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.</Text>

                            <Text>
                                –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {correctCount} –∏–∑ {questions.length}
                            </Text>
                        </>
                    }
                />
            );
        }

        return (
            <DialogStep
                content={
                    <ButtonGroup title={question.question}>
                        {question.answers.map((answer, index) => (
                            <Button key={index} onClick={() => handleAnswer(answer.correct)}>
                                {answer.answer}
                            </Button>
                        ))}
                    </ButtonGroup>
                }
            >
                {renderDialogStep(questionIndex + 1)} {/* –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ */}
            </DialogStep>
        );
    };

    return (
        <Dialog onFinish={(answers) => console.log(answers)}>
            <DialogStep content={<Text>–ü—Ä–∏–≤–µ—Ç! </Text>} id="go">
                {renderDialogStep(currentQuestionIndex)}
            </DialogStep>
        </Dialog>
    );
};

export function App() {
    const [correctCount, setCorrectCount] = useState(0);

    return (
        <>
            <BotQuestion correctCount={correctCount} setCorrectCount={setCorrectCount} />

            <Router>
                <Route path="/echo">
                    <Echo />
                </Route>
                <Route path="/logo">
                    <Logo />
                </Route>
            </Router>
        </>
    );
}
